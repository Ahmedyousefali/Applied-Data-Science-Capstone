import pandas as pd
import requests
import folium
from io import StringIO
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.express as px

# URL of the dataset
url = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_geo.csv'

# Download the dataset
response = requests.get(url)
if response.status_code == 200:
    spacex_df = pd.read_csv(StringIO(response.text))
else:
    print("Failed to download the file")

# Define the center of the map
map_center = [37.0902, -95.7129]

# Create a map centered at the specified location
spacex_map = folium.Map(location=map_center, zoom_start=5)

# Define the launch sites and their coordinates
launch_sites = {
    "VAFB SLC-4E": [34.6329, -120.6108],
    "FS LC-40": [28.3922, -80.6077],
    "KSC LC-39A": [28.5721, -80.6480],
    "CCAFS SLC-40": [28.563197, -80.576820],
}

# Define the closest distances (hypothetical data)
closest_distances = {
    "VAFB SLC-4E": {"city": [34.7, -120.5], "railway": [34.6, -120.55], "highway": [34.65, -120.6]},
    "FS LC-40": {"city": [28.5, -80.6], "railway": [28.4, -80.55], "highway": [28.45, -80.6]},
    "KSC LC-39A": {"city": [28.55, -80.65], "railway": [28.5, -80.62], "highway": [28.55, -80.7]},
    "CCAFS SLC-40": {"city": [28.56, -80.57], "railway": [28.54, -80.575], "highway": [28.56, -80.58]},
}

# Iterate through the dataframe to add markers for each launch
for index, row in spacex_df.iterrows():
    site = row['Launch Site']
    outcome = row['Landing Outcome']
    coords = launch_sites.get(site)
    if coords:
        folium.Marker(
            location=coords,
            popup=f"{site}: {outcome}",
            icon=folium.Icon(color='darkgreen' if 'Success' in outcome else 'red')
        ).add_to(spacex_map)

# Add blue markers and lines for closest city, railway, and highway
for site_name, coords in launch_sites.items():
    distances = closest_distances[site_name]
    for place, place_coords in distances.items():
        folium.Marker(
            location=place_coords,
            popup=f"{place.title()}",
            icon=folium.Icon(color='blue')
        ).add_to(spacex_map)
        
        folium.PolyLine(
            locations=[coords, place_coords],
            color='blue',
            weight=2.5,
            opacity=1
        ).add_to(spacex_map)

# Display the map
spacex_map

# Extract unique launch site names from the dataframe
launch_sites_names = spacex_df['Launch Site'].unique()

# Create the dropdown options list
dropdown_options = [{'label': 'All Sites', 'value': 'ALL'}]
dropdown_options += [{'label': site, 'value': site} for site in launch_sites_names]

# Create the Dash app
app = dash.Dash(__name__)

app.layout = html.Div([
    dcc.Dropdown(
        id='site-dropdown',
        options=dropdown_options,
        value='ALL',
        placeholder="Select a Launch Site here",
        searchable=True
    ),
    dcc.RangeSlider(
        id='payload-slider',
        min=0,
        max=10000,
        step=1000,
        marks={i: f'{i}' for i in range(0, 10001, 1000)},
        value=[0, 10000]
    ),
    dcc.Graph(id='success-pie-chart'),
    dcc.Graph(id='success-payload-scatter-chart')
])

# Callback function to update pie chart based on selected site
@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    Input(component_id='site-dropdown', component_property='value')
)
def get_pie_chart(entered_site):
    filtered_df = spacex_df
    if entered_site == 'ALL':
        fig = px.pie(
            spacex_df,
            names='Launch Site',
            values='class',
            title='Total Success Launches by Site'
        )
    else:
        filtered_df = spacex_df[spacex_df['Launch Site'] == entered_site]
        fig = px.pie(
            filtered_df,
            names='class',
            title=f'Total Success Launches for site {entered_site}'
        )
    return fig

# Callback function to update scatter plot based on selected site and payload range
@app.callback(
    Output(component_id='success-payload-scatter-chart', component_property='figure'),
    Input(component_id='site-dropdown', component_property='value'),
    Input(component_id='payload-slider', component_property='value')
)
def update_scatter_chart(entered_site, selected_payload):
    low, high = selected_payload
    mask = (spacex_df['Payload Mass (kg)'] >= low) & (spacex_df['Payload Mass (kg)'] <= high)
    filtered_df = spacex_df[mask]
    if entered_site == 'ALL':
        fig = px.scatter(
            filtered_df,
            x='Payload Mass (kg)',
            y='class',
            color='Booster Version',
            title='Correlation between Payload and Success for All Sites'
        )
    else:
        filtered_df = filtered_df[filtered_df['Launch Site'] == entered_site]
        fig = px.scatter(
            filtered_df,
            x='Payload Mass (kg)',
            y='class',
            color='Booster Version',
            title=f'Correlation between Payload and Success for site {entered_site}'
        )
    return fig

if __name__ == '__main__':
    app.run_server(debug=True)
