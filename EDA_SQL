# Install the specific version of SQLAlchemy required for the project
!pip install sqlalchemy==1.3.9

# Install the ipython-sql package
!pip install ipython-sql

# Install the prettytable package
!pip install prettytable

# Load the SQL extension
%load_ext sql

# Import necessary libraries
import csv, sqlite3
import prettytable

# Set the default table format for prettytable
prettytable.DEFAULT = 'DEFAULT'

# Connect to the SQLite database
con = sqlite3.connect("my_data1.db")
cur = con.cursor()

# Install pandas library
!pip install -q pandas

# Establish an SQL connection to the SQLite database
%sql sqlite:///my_data1.db

# Import pandas library
import pandas as pd

# Read the CSV data into a DataFrame from the specified URL
df = pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/labs/module_2/data/Spacex.csv")

# Write the DataFrame to the SQLite database table 'SPACEXTBL'
df.to_sql("SPACEXTBL", con, if_exists='replace', index=False, method="multi")

# Drop the table if it exists
# This ensures that the table is removed before creating a new one with the same name
%sql DROP TABLE IF EXISTS SPACEXTABLE;

# Task 1 Display the names of the unique launch sites in the space mission

# Execute the SQL query to get unique launch sites
%sql SELECT DISTINCT "Launch_Site" FROM SPACEXTBL;

# Task 2 Display 5 records where launch sites begin with the string 'CCA'

# Task 3 Display the total payload mass carried by boosters launched by NASA (CRS)

# Execute the SQL query to calculate the total payload mass for NASA (CRS) missions
%sql SELECT SUM(PAYLOAD_MASS__KG_) as TotalPayloadMassofNASACRS FROM SPACEXTBL WHERE Customer LIKE 'NASA (CRS)%';

# Task 4 Display average payload mass carried by booster version F9 v1.1

# Execute the SQL query to calculate the average payload mass for booster version F9 v1.1
%sql SELECT AVG(PAYLOAD_MASS__KG_) as AveragePayloadMass FROM SPACEXTBL WHERE Booster_Version = 'F9 v1.1';

# Task 5 List the date when the first succesful landing outcome in ground pad was acheived.
# Hint:Use min function

# Execute the SQL query to find the date of the first successful landing outcome on a ground pad
%sql SELECT MIN(Date) as FirstSuccessfulLandingDate FROM SPACEXTBL WHERE "Landing_Outcome" = 'Success (ground pad)';

# Task 6 List the names of the boosters which have success in drone ship and have payload mass greater than 4000 but less than 6000

# Execute the SQL query to find the names of boosters with specific conditions
%sql SELECT Booster_Version FROM SPACEXTBL WHERE "Landing_Outcome" = 'Success (drone ship)' AND PAYLOAD_MASS__KG_ > 4000 AND PAYLOAD_MASS__KG_ < 6000;

# Task 7 List the total number of successful and failure mission outcomes

# Execute the SQL query to count the number of successful and failed mission outcomes
%sql SELECT "Mission_Outcome", COUNT(*) as Total FROM SPACEXTBL GROUP BY "Mission_Outcome";

# Task 8 List the names of the booster_versions which have carried the maximum payload mass. Use a subquery

# Execute the SQL query to find the booster versions with the maximum payload mass
%sql SELECT Booster_Version FROM SPACEXTBL WHERE PAYLOAD_MASS__KG_ = (SELECT MAX(PAYLOAD_MASS__KG_) FROM SPACEXTBL);

# Task 9 List the records which will display the month names, failure landing_outcomes in drone ship ,booster versions, launch_site for the months in year 2015.
# Note: SQLLite does not support monthnames. So you need to use substr(Date, 6,2) as month to get the months and substr(Date,0,5)='2015' for year.
S
# Execute the SQL query to list records with the specified criteria
%sql SELECT substr(Date, 6, 2) as Month, "Landing_Outcome", Booster_Version, Launch_Site FROM SPACEXTBL WHERE substr(Date, 0, 5) = '2015' AND "Landing_Outcome" = 'Failure (drone ship)';

# Task 10 Rank the count of landing outcomes (such as Failure (drone ship) or Success (ground pad)) between the date 2010-06-04 and 2017-03-20, in descending order.

# Execute the SQL query to rank the count of landing outcomes between the specified dates in descending order
%sql SELECT "Landing_Outcome", COUNT(*) as Outcome_Count FROM SPACEXTBL WHERE Date BETWEEN '2010-06-04' AND '2017-03-20' GROUP BY "Landing_Outcome" ORDER BY Outcome_Count DESC;









