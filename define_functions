# Requests allows us to make HTTP requests which we will use to get data from an API
#Need to import the following libraries to perform our task
  import requests
# Pandas is a software library written for the Python programming language for data manipulation and analysis.
import pandas as pd
# NumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays
import numpy as np
# Datetime is a library that allows us to represent dates
import datetime

# Setting this option will print all collumns of a dataframe
pd.set_option('display.max_columns', None)
# Setting this option will print all of the data in a feature
pd.set_option('display.max_colwidth', None)
# Takes the dataset and uses the rocket column to call the API and append the data to the list
def getBoosterVersion(data):
    for x in data['rocket']:
       if x:
        response = requests.get("https://api.spacexdata.com/v4/rockets/"+str(x)).json()
        BoosterVersion.append(response['name'])
  # Takes the dataset and uses the launchpad column to call the API and append the data to the list
def getLaunchSite(data):
    for x in data['launchpad']:
       if x:
         response = requests.get("https://api.spacexdata.com/v4/launchpads/"+str(x)).json()
         Longitude.append(response['longitude'])
         Latitude.append(response['latitude'])
         LaunchSite.append(response['name'])
  # Takes the dataset and uses the payloads column to call the API and append the data to the lists
def getPayloadData(data):
    for load in data['payloads']:
       if load:
        response = requests.get("https://api.spacexdata.com/v4/payloads/"+load).json()
        PayloadMass.append(response['mass_kg'])
        Orbit.append(response['orbit'])
  # Takes the dataset and uses the cores column to call the API and append the data to the lists
def getCoreData(data):
    for core in data['cores']:
            if core['core'] != None:
                response = requests.get("https://api.spacexdata.com/v4/cores/"+core['core']).json()
                Block.append(response['block'])
                ReusedCount.append(response['reuse_count'])
                Serial.append(response['serial'])
            else:
                Block.append(None)
                ReusedCount.append(None)
                Serial.append(None)
            Outcome.append(str(core['landing_success'])+' '+str(core['landing_type']))
            Flights.append(core['flight'])
            GridFins.append(core['gridfins'])
            Reused.append(core['reused'])
            Legs.append(core['legs'])
            LandingPad.append(core['landpad'])
  #start requesting rocket launch data from SpaceX API with the following URL:
  spacex_url="https://api.spacexdata.com/v4/launches/past"
  response = requests.get(spacex_url)
  #Check the content of the response
  print(response.content)
  #This prints the whole page/s
  # Get the head of the dataframe
  # URL to fetch data from the SpaceX API
spacex_url = "https://api.spacexdata.com/v4/launches/past"

# Fetch the data
response = requests.get(spacex_url)

# Check if the response was successful (status code 200)
if response.status_code == 200:
    # Decode the response content into a JSON object
    data = response.json()
    
    # Normalize the JSON data into a Pandas DataFrame
    df = pd.json_normalize(data)
    
    # Get the first few rows (head) of the DataFrame
    df_head = df.head()
    
    # Print the head of the dataframe
    print(df_head)
else:
    print(f"Failed to fetch data. Status code: {response.status_code}")

  
